async def send_telegram_message(bot_token, chat_id, message, success_count, total_apis, current_rooms_count, total_rooms, json_file_path='timer.json'):
    try:
        logging.info("B·∫Øt ƒë·∫ßu qu√° tr√¨nh g·ª≠i tin nh·∫Øn t·ªõi Telegram.")
        
        # X·ª≠ l√Ω s·ªë li·ªáu th·ªëng k√™
        success_count_value = success_count[0] if isinstance(success_count, list) and success_count else 0
        total_apis_value = total_apis if total_apis else 0

        if success_count_value > total_apis_value:
            success_count_value = total_apis_value

        # L·∫•y m√£ qu·ªëc gia v√† emoji c·ªù
        country_code = message.get('country_code', 'VN')
        flag = get_flag_emoji(country_code)

        # Emoji l·ª≠a n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán
        fire_emoji = "üî•" if message['ratio'] >= 10 and message['diamond_count'] >= 100 else ""
        special_box_message = " <b>üöÄüî• R∆∞∆°ng ƒê·∫∑c Bi·ªát! üî•üöÄ</b>\n" if message['ratio'] >= 10 and message['diamond_count'] >= 100 else ""

        # Th·ªùi gian s·ª≠ d·ª•ng (d·ª±a tr√™n get_remaining_time)
        remaining_time = get_remaining_time(json_file_path)
        if isinstance(remaining_time, str):
            hsd_text = f"‚Ä¢ HSD: {remaining_time}"
            id_text = "END_TIME"
            url_text = "tiktok.com/share/*END_TIME*/live"
        else:
            remaining_hours, remaining_minutes = remaining_time
            hsd_text = f"‚Ä¢ HSD:     {remaining_hours}h {remaining_minutes}p"

            # Ki·ªÉm tra t·ª∑ l·ªá ƒë·ªÉ ƒëi·ªÅu ch·ªânh ID v√† URL
            if message['ratio'] > 2:
                id_text = "***_***"
                url_text = "Tiktok.com/share/live/***_***"
            else:
                id_text = f"<b>{message['tiktok_id']}</b>"
                url_text = f"<b>{html.escape(message['url'])}</b>"

        # T·∫°o URL ƒë·∫øm ng∆∞·ª£c v·ªõi unpack_at v√† th√™m th√¥ng tin id v√† box
        github_link = (
            f"https://thanhtai9832.github.io/realtime/?unpack_at={message['unpack_at']}"
            f"&diamond_count={message['diamond_count']}"
            f"&people_count={message['people_count']}"
        )

        # L·∫•y "time h·∫øt h·∫°n" (expiry time)
        expiry_time = message.get('expiry_time', '04:12:59')

        # T·∫°o n·ªôi dung tin nh·∫Øn
        full_message = (
            f"‚Ä¢ ID:    {id_text}\n"
            f"‚Ä¢ {url_text}\n"
            f"{special_box_message}"
            f"‚Ä¢ Box:    <b>{message['diamond_count']}</b>/<b>{message['people_count']}</b>   "
            f"View: <b>{message.get('total', 'Kh√¥ng r√µ')}</b>\n"
            f"‚Ä¢ Ratio:    <b>{message['ratio']:.1f}</b> xu {fire_emoji}   {flag}\n"
            f"‚Ä¢ Time: <a href='{github_link}'>{message['remaining_time'] // 60:02}:{message['remaining_time'] % 60:02}s</a> "
            f"(<b>{expiry_time}</b>)\n"
            f"‚Ä¢ Lives:    <b>{current_rooms_count}/{total_rooms}</b>\n"
            f"{hsd_text}"
        )
        logging.info(f"N·ªôi dung tin nh·∫Øn s·∫Ω g·ª≠i:\n{full_message}")

        # C·∫•u h√¨nh API Telegram
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': full_message,
            'parse_mode': 'HTML'
        }

        # G·ª≠i y√™u c·∫ßu t·ªõi Telegram API
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data) as response:
                if response.status == 200:
                    logging.info("Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng qua Telegram.")
                else:
                    logging.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram. M√£ tr·∫°ng th√°i: {response.status}. N·ªôi dung l·ªói: {await response.text()}")

    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram: {e}") 